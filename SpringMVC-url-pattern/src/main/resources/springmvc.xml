<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--springmvc的配置文件-->
    <!--声明组件扫描器-->
    <context:component-scan base-package="com.example.controller" />

    <!--声明视图解析器：帮助处理视图-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀：指定视图文件的路径-->
        <property name="prefix" value="/WEB-INF/view/" />
        <!--后缀：视图文件的扩展名-->
        <property name="suffix" value=".jsp" />
    </bean>

    <!--声明注解驱动：创建HttpMessageConverter接口的8个实现类对象
    &lt;!&ndash;
        默认创建4个HttpMessageConverter接口实现类，包括StringHttpMessageConverter
    &ndash;&gt;
    &lt;!&ndash;
        声明注解，默认创建8个HttpMessageConverter接口实现类，
        包括StringHttpMessageConverter和MappingJackson2HttpMessageConverter
    &ndash;&gt;
    <mvc:annotation-driven />-->



    <!--前端控制器处理静态资源第一种方式（不常用）
    &lt;!&ndash;声明注解驱动
        default-servlet-handler和@RequestMapping使用有冲突，即能处理静态资源不能处理动态资源
        <mvc:annotation-driven />解决冲突
    &ndash;&gt;
    <mvc:annotation-driven />

    &lt;!&ndash;声明静态资源的第一种处理方式
        创建DefaultServletHttpRequestHandler处理静态资源。
        DefaultServletHttpRequestHandler把接收的静态资源的地址，转发给了tomcat的default

        优点：
          解决方式简单
        缺点：
          依赖tomcat服务器提供的能力。
    &ndash;&gt;
    <mvc:default-servlet-handler />-->


    <!--前端控制器处理静态资源第二种方式（常用）-->
    <!--声明静态资源的第二种处理方式
        mapping: 访问静态资源的uri地址，可以使用通配符（**）。
                  **:表示任意的目录和目录和资源名称
        location: 静态资源在项目中的位置，不要使用/WEB-INF(只能在本项目中使用)目录
    -->
    <!--
        在springmvc配置文件中加入一个mvc:resources标签，
        框架会创建ResourceHttpRequestHandler控制器对象，
        使用这个对象处理静态资源的访问。
        不依赖tomcat服务器。推荐使用的。
    -->
    <mvc:resources mapping="/images/**" location="/images/" />
    <mvc:resources mapping="/html/**" location="/html/" />
    <mvc:resources mapping="/js/**" location="/js/" />

    <!--一句话设置静态资源-->
    <!--<mvc:resources mapping="/static/**" location="/static/" />-->
</beans>